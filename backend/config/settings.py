"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

import os
import environ  # 추가: 환경 변수 관리를 위한 django-environ

env = environ.Env(
    DEBUG=(bool, False)
)

# settings.py 파일 기준 C드라이브 바로 위 상위폴더를 BASE_DIR로 설정
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# .env 파일 읽어오기
# environ.Env.read_env(os.path.join(BASE_DIR, 'backend', '.env'))


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .env 파일에서 SECRET_KEY 변수를 읽어옵니다.
SECRET_KEY = env('SECRET_KEY')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['34.50.44.190', 'api.jwcho.cloud','127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'community',
    'rest_framework',
    'corsheaders',
    'rest_framework.authtoken', # dj-rest-auth에 필요
    'dj_rest_auth', # dj-rest-auth 기본 앱
    'allauth', # dj-rest-auth에 필요
    'allauth.account', # dj-rest-auth에 필요
    'allauth.socialaccount', # dj-rest-auth에 필요
    #'dj_rest_auth.registration', # 회원가입 기능용
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': env.db(),  # .env 파일의 DATABASE_URL 환경 변수를 사용하여 데이터베이스 설정
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'





# config/settings.py (파일 맨 아래에 추가)

# CORS 설정: 어떤 출처(Origin)의 요청을 허용할지 지정합니다.
CORS_ALLOWED_ORIGINS = [
    'http://localhost:5173', # React 개발 서버 주소
    'http://127.0.0.1:5173', # React 개발 서버 주소 (다른 형태)
    'https://reframe-project.vercel.app',
    'https://jwcho.cloud',
    'https://www.jwcho.cloud',
]



# 이메일 인증을 사용하지 않을 것이므로 'none'으로 설정
#ACCOUNT_EMAIL_VERIFICATION = 'none'
# 이메일 필드를 필수로 요구하지 않음
#ACCOUNT_EMAIL_REQUIRED = False

# DRF가 기본적으로 JWT 인증을 사용하도록 설정
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # 아래 퍼미션 설정을 추가해주세요.
    'DEFAULT_PERMISSION_CLASSES': (
        # 기본적으로 모든 접근을 허용하고, 각 ViewSet에서 개별적으로 권한을 설정하도록 합니다.
        'rest_framework.permissions.AllowAny',
    )
}

# dj-rest-auth가 JWT를 사용하도록 설정
REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'my-app-auth', # 쿠키 이름 설정
    'JWT_AUTH_REFRESH_COOKIE': 'my-refresh-token', # 리프레시 토큰 쿠키 이름 설정
    'USER_DETAILS_SERIALIZER': 'community.serializers.CustomUserDetailsSerializer',
}

# 사이트 ID 설정 (allauth에 필요)
SITE_ID = 1



# .env 파일에서 REPLICATE_API_TOKEN 변수를 읽어옵니다.
REPLICATE_API_TOKEN = env('REPLICATE_API_TOKEN')

# 업로드된 파일이 저장될 실제 경로 (프로젝트 루트 아래 media 폴더)
MEDIA_ROOT = BASE_DIR / 'media'
# 브라우저에서 파일에 접근할 때 사용할 URL 경로 (예: /media/admin_files/example.jpg)
MEDIA_URL = '/media/'